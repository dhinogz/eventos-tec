// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllEvents = `-- name: GetAllEvents :many
SELECT e.id, e.title, e.date, e.venue, e.is_online, e.meeting_link, e.capacity, o.name as organization_name
FROM events e
JOIN organization o ON o.id = e.organization_id
`

type GetAllEventsRow struct {
	ID               int64
	Title            string
	Date             pgtype.Timestamp
	Venue            string
	IsOnline         bool
	MeetingLink      string
	Capacity         int64
	OrganizationName string
}

func (q *Queries) GetAllEvents(ctx context.Context) ([]GetAllEventsRow, error) {
	rows, err := q.db.Query(ctx, getAllEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllEventsRow
	for rows.Next() {
		var i GetAllEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Date,
			&i.Venue,
			&i.IsOnline,
			&i.MeetingLink,
			&i.Capacity,
			&i.OrganizationName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventDetails = `-- name: GetEventDetails :one
SELECT e.id, e.title, e.description, e.venue, e.is_online, e.capacity, o.name as organization_name
FROM events e
JOIN organization o ON o.id = e.organization_id
WHERE e.id = $1 AND e.active = true
`

type GetEventDetailsRow struct {
	ID               int64
	Title            string
	Description      string
	Venue            string
	IsOnline         bool
	Capacity         int64
	OrganizationName string
}

func (q *Queries) GetEventDetails(ctx context.Context, id int64) (GetEventDetailsRow, error) {
	row := q.db.QueryRow(ctx, getEventDetails, id)
	var i GetEventDetailsRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Venue,
		&i.IsOnline,
		&i.Capacity,
		&i.OrganizationName,
	)
	return i, err
}

const insertEvent = `-- name: InsertEvent :one
INSERT INTO events (
    organization_id,
    title,
    description,
    capacity,
    date,
    duration,
    venue,
    is_online,
    meeting_link
) VALUES (
    $1,  -- organization_id
    $2,  -- title
    $3,  -- description
    $4,  -- capacity
    $5,  -- date
    $6,  -- duration
    $7,  -- venue
    $8,  -- is_online
    $9   -- meeting_link
)
RETURNING id
`

type InsertEventParams struct {
	OrganizationID int64
	Title          string
	Description    string
	Capacity       int64
	Date           pgtype.Timestamp
	Duration       int64
	Venue          string
	IsOnline       bool
	MeetingLink    string
}

func (q *Queries) InsertEvent(ctx context.Context, arg InsertEventParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertEvent,
		arg.OrganizationID,
		arg.Title,
		arg.Description,
		arg.Capacity,
		arg.Date,
		arg.Duration,
		arg.Venue,
		arg.IsOnline,
		arg.MeetingLink,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
