// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: events_report.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getEventsReport = `-- name: GetEventsReport :many
SELECT e.id, e.title, e.description, e.date, e.venue, e.is_online, e.meeting_link, e.capacity, o.name as organization_name, er.attendance_count as event_attendance, er.mean_reviews as event_rating
FROM events e
JOIN organization o ON o.id = e.organization_id
JOIN event_reports er ON er.event_id = e.id
`

type GetEventsReportRow struct {
	ID               int64
	Title            string
	Description      string
	Date             pgtype.Timestamp
	Venue            string
	IsOnline         bool
	MeetingLink      string
	Capacity         int64
	OrganizationName string
	EventAttendance  int32
	EventRating      float64
}

func (q *Queries) GetEventsReport(ctx context.Context) ([]GetEventsReportRow, error) {
	rows, err := q.db.Query(ctx, getEventsReport)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsReportRow
	for rows.Next() {
		var i GetEventsReportRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Date,
			&i.Venue,
			&i.IsOnline,
			&i.MeetingLink,
			&i.Capacity,
			&i.OrganizationName,
			&i.EventAttendance,
			&i.EventRating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
