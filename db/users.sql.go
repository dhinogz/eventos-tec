// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, hashed_password)
VALUES ($1, $2)
RETURNING id, email, hashed_password, last_login, created_at, active
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.HashedPassword,
		&i.LastLogin,
		&i.CreatedAt,
		&i.Active,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT u.id, u.email, u.hashed_password
FROM users u
`

type GetAllUsersRow struct {
	ID             int64
	Email          string
	HashedPassword string
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(&i.ID, &i.Email, &i.HashedPassword); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT u.id, u.email, u.hashed_password
FROM sessions s
JOIN users u ON u.user_id = s.user_id
WHERE s.token_hash = $1
`

type GetUserRow struct {
	ID             int64
	Email          string
	HashedPassword string
}

func (q *Queries) GetUser(ctx context.Context, tokenHash string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, tokenHash)
	var i GetUserRow
	err := row.Scan(&i.ID, &i.Email, &i.HashedPassword)
	return i, err
}
