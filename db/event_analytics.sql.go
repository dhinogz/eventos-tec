// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: event_analytics.sql

package db

import (
	"context"
)

const insertEventAnalytics = `-- name: InsertEventAnalytics :exec
INSERT INTO event_reports (event_id, attendance_count, mean_reviews, created_at, active)
VALUES ($1, $2, $3, NOW(), TRUE)
`

type InsertEventAnalyticsParams struct {
	EventID         int64
	AttendanceCount int32
	MeanReviews     float64
}

func (q *Queries) InsertEventAnalytics(ctx context.Context, arg InsertEventAnalyticsParams) error {
	_, err := q.db.Exec(ctx, insertEventAnalytics, arg.EventID, arg.AttendanceCount, arg.MeanReviews)
	return err
}

const queryAttendace = `-- name: QueryAttendace :one
SELECT 
    COUNT(*) AS attendance_count
FROM event_registers
WHERE event_id = $1 AND did_attend = TRUE
`

func (q *Queries) QueryAttendace(ctx context.Context, eventID int64) (int64, error) {
	row := q.db.QueryRow(ctx, queryAttendace, eventID)
	var attendance_count int64
	err := row.Scan(&attendance_count)
	return attendance_count, err
}

const queryMeanReviews = `-- name: QueryMeanReviews :one
SELECT 
    AVG(rating) AS mean_reviews
FROM reviews
WHERE event_id = $1
`

func (q *Queries) QueryMeanReviews(ctx context.Context, eventID int64) (float64, error) {
	row := q.db.QueryRow(ctx, queryMeanReviews, eventID)
	var mean_reviews float64
	err := row.Scan(&mean_reviews)
	return mean_reviews, err
}
